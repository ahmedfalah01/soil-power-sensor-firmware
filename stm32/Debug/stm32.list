
stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b14  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001c4c  08001c4c  00011c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce8  08001ce8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ce8  08001ce8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ce8  08001ce8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce8  08001ce8  00011ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cec  08001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001cfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001cfc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000634a  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001635  00000000  00000000  000263c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d8  00000000  00000000  000279f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000738  00000000  00000000  000283d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a696  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007ffa  00000000  00000000  0004319e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5c89  00000000  00000000  0004b198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000269c  00000000  00000000  000f0e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f34c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08001c34 	.word	0x08001c34

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08001c34 	.word	0x08001c34

08000178 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4313      	orrs	r3, r2
 800018e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4013      	ands	r3, r2
 800019a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001bc:	2001      	movs	r0, #1
 80001be:	f7ff ffdb 	bl	8000178 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001c2:	2002      	movs	r0, #2
 80001c4:	f7ff ffd8 	bl	8000178 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ce:	481d      	ldr	r0, [pc, #116]	; (8000244 <MX_GPIO_Init+0x9c>)
 80001d0:	f000 fbb6 	bl	8000940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001da:	481a      	ldr	r0, [pc, #104]	; (8000244 <MX_GPIO_Init+0x9c>)
 80001dc:	f000 fbb0 	bl	8000940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e6:	2301      	movs	r3, #1
 80001e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ee:	2300      	movs	r3, #0
 80001f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4619      	mov	r1, r3
 80001f6:	4813      	ldr	r0, [pc, #76]	; (8000244 <MX_GPIO_Init+0x9c>)
 80001f8:	f000 fa42 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80001fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000202:	2301      	movs	r3, #1
 8000204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000206:	2302      	movs	r3, #2
 8000208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020a:	2300      	movs	r3, #0
 800020c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800020e:	1d3b      	adds	r3, r7, #4
 8000210:	4619      	mov	r1, r3
 8000212:	480c      	ldr	r0, [pc, #48]	; (8000244 <MX_GPIO_Init+0x9c>)
 8000214:	f000 fa34 	bl	8000680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800021c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800021e:	2302      	movs	r3, #2
 8000220:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000222:	2300      	movs	r3, #0
 8000224:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000226:	2300      	movs	r3, #0
 8000228:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4619      	mov	r1, r3
 8000232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000236:	f000 fa23 	bl	8000680 <HAL_GPIO_Init>

}
 800023a:	bf00      	nop
 800023c:	3718      	adds	r7, #24
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	48000400 	.word	0x48000400

08000248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024c:	f000 f8c0 	bl	80003d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000250:	f000 f804 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000254:	f7ff ffa8 	bl	80001a8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x10>
	...

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b09a      	sub	sp, #104	; 0x68
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0320 	add.w	r3, r7, #32
 8000266:	2248      	movs	r2, #72	; 0x48
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f001 fcb6 	bl	8001bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]
 800027e:	615a      	str	r2, [r3, #20]
 8000280:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000282:	4b21      	ldr	r3, [pc, #132]	; (8000308 <SystemClock_Config+0xac>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800028a:	4a1f      	ldr	r2, [pc, #124]	; (8000308 <SystemClock_Config+0xac>)
 800028c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000290:	6013      	str	r3, [r2, #0]
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <SystemClock_Config+0xac>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800029e:	2320      	movs	r3, #32
 80002a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002a6:	2300      	movs	r3, #0
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002aa:	2360      	movs	r3, #96	; 0x60
 80002ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fe2c 	bl	8000f14 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002c2:	f000 f823 	bl	800030c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80002c6:	234f      	movs	r3, #79	; 0x4f
 80002c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f998 	bl	8001618 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002ee:	f000 f80d 	bl	800030c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80002f2:	2200      	movs	r2, #0
 80002f4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80002f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80002fc:	f001 face 	bl	800189c <HAL_RCC_MCOConfig>
}
 8000300:	bf00      	nop
 8000302:	3768      	adds	r7, #104	; 0x68
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	58000400 	.word	0x58000400

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000310:	b672      	cpsid	i
}
 8000312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000314:	e7fe      	b.n	8000314 <Error_Handler+0x8>

08000316 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000316:	b480      	push	{r7}
 8000318:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800031a:	bf00      	nop
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000326:	e7fe      	b.n	8000326 <NMI_Handler+0x4>

08000328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032c:	e7fe      	b.n	800032c <HardFault_Handler+0x4>

0800032e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000332:	e7fe      	b.n	8000332 <MemManage_Handler+0x4>

08000334 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <BusFault_Handler+0x4>

0800033a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033e:	e7fe      	b.n	800033e <UsageFault_Handler+0x4>

08000340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000368:	f000 f88c 	bl	8000484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}

08000370 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f7ff fff6 	bl	8000370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f001 fc1f 	bl	8001bec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff4b 	bl	8000248 <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003c0:	08001cf0 	.word	0x08001cf0
  ldr r2, =_sbss
 80003c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003c8:	2000002c 	.word	0x2000002c

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003d6:	2300      	movs	r3, #0
 80003d8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003da:	2003      	movs	r0, #3
 80003dc:	f000 f91e 	bl	800061c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80003e0:	f001 fb36 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 80003e4:	4603      	mov	r3, r0
 80003e6:	4a09      	ldr	r2, [pc, #36]	; (800040c <HAL_Init+0x3c>)
 80003e8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003ea:	200f      	movs	r0, #15
 80003ec:	f000 f810 	bl	8000410 <HAL_InitTick>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d002      	beq.n	80003fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80003f6:	2301      	movs	r3, #1
 80003f8:	71fb      	strb	r3, [r7, #7]
 80003fa:	e001      	b.n	8000400 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80003fc:	f7ff ff8b 	bl	8000316 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000400:	79fb      	ldrb	r3, [r7, #7]
}
 8000402:	4618      	mov	r0, r3
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000000 	.word	0x20000000

08000410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <HAL_InitTick+0x6c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d024      	beq.n	800046e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000424:	f001 fb14 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8000428:	4602      	mov	r2, r0
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <HAL_InitTick+0x6c>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	4619      	mov	r1, r3
 8000430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000434:	fbb3 f3f1 	udiv	r3, r3, r1
 8000438:	fbb2 f3f3 	udiv	r3, r2, r3
 800043c:	4618      	mov	r0, r3
 800043e:	f000 f912 	bl	8000666 <HAL_SYSTICK_Config>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d10f      	bne.n	8000468 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b0f      	cmp	r3, #15
 800044c:	d809      	bhi.n	8000462 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800044e:	2200      	movs	r2, #0
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	f04f 30ff 	mov.w	r0, #4294967295
 8000456:	f000 f8ec 	bl	8000632 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800045a:	4a09      	ldr	r2, [pc, #36]	; (8000480 <HAL_InitTick+0x70>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e007      	b.n	8000472 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000462:	2301      	movs	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	e004      	b.n	8000472 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000468:	2301      	movs	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	e001      	b.n	8000472 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800046e:	2301      	movs	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000472:	7bfb      	ldrb	r3, [r7, #15]
}
 8000474:	4618      	mov	r0, r3
 8000476:	3710      	adds	r7, #16
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000008 	.word	0x20000008
 8000480:	20000004 	.word	0x20000004

08000484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <HAL_IncTick+0x1c>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <HAL_IncTick+0x20>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4413      	add	r3, r2
 8000494:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <HAL_IncTick+0x20>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	20000008 	.word	0x20000008
 80004a4:	20000028 	.word	0x20000028

080004a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return uwTick;
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <HAL_GetTick+0x10>)
 80004ae:	681b      	ldr	r3, [r3, #0]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000028 	.word	0x20000028

080004bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f003 0307 	and.w	r3, r3, #7
 80004ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <__NVIC_SetPriorityGrouping+0x44>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80004e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <__NVIC_SetPriorityGrouping+0x44>)
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	60d3      	str	r3, [r2, #12]
}
 80004f4:	bf00      	nop
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	e000ed00 	.word	0xe000ed00

08000504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <__NVIC_GetPriorityGrouping+0x18>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	f003 0307 	and.w	r3, r3, #7
}
 8000512:	4618      	mov	r0, r3
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800052c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000530:	2b00      	cmp	r3, #0
 8000532:	db0a      	blt.n	800054a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	b2da      	uxtb	r2, r3
 8000538:	490c      	ldr	r1, [pc, #48]	; (800056c <__NVIC_SetPriority+0x4c>)
 800053a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053e:	0112      	lsls	r2, r2, #4
 8000540:	b2d2      	uxtb	r2, r2
 8000542:	440b      	add	r3, r1
 8000544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000548:	e00a      	b.n	8000560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4908      	ldr	r1, [pc, #32]	; (8000570 <__NVIC_SetPriority+0x50>)
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f003 030f 	and.w	r3, r3, #15
 8000556:	3b04      	subs	r3, #4
 8000558:	0112      	lsls	r2, r2, #4
 800055a:	b2d2      	uxtb	r2, r2
 800055c:	440b      	add	r3, r1
 800055e:	761a      	strb	r2, [r3, #24]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e100 	.word	0xe000e100
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000574:	b480      	push	{r7}
 8000576:	b089      	sub	sp, #36	; 0x24
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000588:	69fb      	ldr	r3, [r7, #28]
 800058a:	f1c3 0307 	rsb	r3, r3, #7
 800058e:	2b04      	cmp	r3, #4
 8000590:	bf28      	it	cs
 8000592:	2304      	movcs	r3, #4
 8000594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	3304      	adds	r3, #4
 800059a:	2b06      	cmp	r3, #6
 800059c:	d902      	bls.n	80005a4 <NVIC_EncodePriority+0x30>
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	3b03      	subs	r3, #3
 80005a2:	e000      	b.n	80005a6 <NVIC_EncodePriority+0x32>
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	f04f 32ff 	mov.w	r2, #4294967295
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	fa02 f303 	lsl.w	r3, r2, r3
 80005b2:	43da      	mvns	r2, r3
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	401a      	ands	r2, r3
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	fa01 f303 	lsl.w	r3, r1, r3
 80005c6:	43d9      	mvns	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	4313      	orrs	r3, r2
         );
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3724      	adds	r7, #36	; 0x24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr

080005d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005e8:	d301      	bcc.n	80005ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ea:	2301      	movs	r3, #1
 80005ec:	e00f      	b.n	800060e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <SysTick_Config+0x40>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3b01      	subs	r3, #1
 80005f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005f6:	210f      	movs	r1, #15
 80005f8:	f04f 30ff 	mov.w	r0, #4294967295
 80005fc:	f7ff ff90 	bl	8000520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <SysTick_Config+0x40>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <SysTick_Config+0x40>)
 8000608:	2207      	movs	r2, #7
 800060a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	e000e010 	.word	0xe000e010

0800061c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff49 	bl	80004bc <__NVIC_SetPriorityGrouping>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b086      	sub	sp, #24
 8000636:	af00      	add	r7, sp, #0
 8000638:	4603      	mov	r3, r0
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	607a      	str	r2, [r7, #4]
 800063e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000640:	f7ff ff60 	bl	8000504 <__NVIC_GetPriorityGrouping>
 8000644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	68b9      	ldr	r1, [r7, #8]
 800064a:	6978      	ldr	r0, [r7, #20]
 800064c:	f7ff ff92 	bl	8000574 <NVIC_EncodePriority>
 8000650:	4602      	mov	r2, r0
 8000652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff61 	bl	8000520 <__NVIC_SetPriority>
}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ffb2 	bl	80005d8 <SysTick_Config>
 8000674:	4603      	mov	r3, r0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000680:	b480      	push	{r7}
 8000682:	b087      	sub	sp, #28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800068e:	e140      	b.n	8000912 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2101      	movs	r1, #1
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	4013      	ands	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f000 8132 	beq.w	800090c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d005      	beq.n	80006c0 <HAL_GPIO_Init+0x40>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f003 0303 	and.w	r3, r3, #3
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d130      	bne.n	8000722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	2203      	movs	r2, #3
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	43db      	mvns	r3, r3
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	4013      	ands	r3, r2
 80006d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	68da      	ldr	r2, [r3, #12]
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006f6:	2201      	movs	r2, #1
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	4013      	ands	r3, r2
 8000704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	091b      	lsrs	r3, r3, #4
 800070c:	f003 0201 	and.w	r2, r3, #1
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	4313      	orrs	r3, r2
 800071a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	f003 0303 	and.w	r3, r3, #3
 800072a:	2b03      	cmp	r3, #3
 800072c:	d017      	beq.n	800075e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	2203      	movs	r2, #3
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43db      	mvns	r3, r3
 8000740:	693a      	ldr	r2, [r7, #16]
 8000742:	4013      	ands	r3, r2
 8000744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	689a      	ldr	r2, [r3, #8]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	693a      	ldr	r2, [r7, #16]
 8000754:	4313      	orrs	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	2b02      	cmp	r3, #2
 8000768:	d123      	bne.n	80007b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	08da      	lsrs	r2, r3, #3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3208      	adds	r2, #8
 8000772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	220f      	movs	r2, #15
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	43db      	mvns	r3, r3
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	4013      	ands	r3, r2
 800078c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	691a      	ldr	r2, [r3, #16]
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	693a      	ldr	r2, [r7, #16]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	08da      	lsrs	r2, r3, #3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3208      	adds	r2, #8
 80007ac:	6939      	ldr	r1, [r7, #16]
 80007ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	2203      	movs	r2, #3
 80007be:	fa02 f303 	lsl.w	r3, r2, r3
 80007c2:	43db      	mvns	r3, r3
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	4013      	ands	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	f003 0203 	and.w	r2, r3, #3
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4313      	orrs	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	f000 808c 	beq.w	800090c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80007f4:	4a4e      	ldr	r2, [pc, #312]	; (8000930 <HAL_GPIO_Init+0x2b0>)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	3302      	adds	r3, #2
 80007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	2207      	movs	r2, #7
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800081e:	d00d      	beq.n	800083c <HAL_GPIO_Init+0x1bc>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a44      	ldr	r2, [pc, #272]	; (8000934 <HAL_GPIO_Init+0x2b4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d007      	beq.n	8000838 <HAL_GPIO_Init+0x1b8>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a43      	ldr	r2, [pc, #268]	; (8000938 <HAL_GPIO_Init+0x2b8>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d101      	bne.n	8000834 <HAL_GPIO_Init+0x1b4>
 8000830:	2302      	movs	r3, #2
 8000832:	e004      	b.n	800083e <HAL_GPIO_Init+0x1be>
 8000834:	2307      	movs	r3, #7
 8000836:	e002      	b.n	800083e <HAL_GPIO_Init+0x1be>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <HAL_GPIO_Init+0x1be>
 800083c:	2300      	movs	r3, #0
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	f002 0203 	and.w	r2, r2, #3
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	4093      	lsls	r3, r2
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4313      	orrs	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800084e:	4938      	ldr	r1, [pc, #224]	; (8000930 <HAL_GPIO_Init+0x2b0>)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	3302      	adds	r3, #2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800085c:	4b37      	ldr	r3, [pc, #220]	; (800093c <HAL_GPIO_Init+0x2bc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	43db      	mvns	r3, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d003      	beq.n	8000880 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000880:	4a2e      	ldr	r2, [pc, #184]	; (800093c <HAL_GPIO_Init+0x2bc>)
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <HAL_GPIO_Init+0x2bc>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <HAL_GPIO_Init+0x2bc>)
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <HAL_GPIO_Init+0x2bc>)
 80008b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008b6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	43db      	mvns	r3, r3
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d003      	beq.n	80008d6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_GPIO_Init+0x2bc>)
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_GPIO_Init+0x2bc>)
 80008e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80008e4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	43db      	mvns	r3, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d003      	beq.n	8000904 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <HAL_GPIO_Init+0x2bc>)
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	3301      	adds	r3, #1
 8000910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	fa22 f303 	lsr.w	r3, r2, r3
 800091c:	2b00      	cmp	r3, #0
 800091e:	f47f aeb7 	bne.w	8000690 <HAL_GPIO_Init+0x10>
  }
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40010000 	.word	0x40010000
 8000934:	48000400 	.word	0x48000400
 8000938:	48000800 	.word	0x48000800
 800093c:	58000800 	.word	0x58000800

08000940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
 800094c:	4613      	mov	r3, r2
 800094e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000950:	787b      	ldrb	r3, [r7, #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000956:	887a      	ldrh	r2, [r7, #2]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800095c:	e002      	b.n	8000964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
	...

08000970 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <HAL_PWR_EnableBkUpAccess+0x18>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	58000400 	.word	0x58000400

0800098c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <HAL_PWREx_GetVoltageRange+0x14>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	58000400 	.word	0x58000400

080009a4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009b4:	d101      	bne.n	80009ba <LL_PWR_IsEnabledBkUpAccess+0x16>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	58000400 	.word	0x58000400

080009c8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80009cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000a12:	d101      	bne.n	8000a18 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr

08000a22 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a34:	6013      	str	r3, [r2, #0]
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a50:	6013      	str	r3, [r2, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a6c:	d101      	bne.n	8000a72 <LL_RCC_HSE_IsReady+0x18>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <LL_RCC_HSE_IsReady+0x1a>
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ac6:	d101      	bne.n	8000acc <LL_RCC_HSI_IsReady+0x18>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <LL_RCC_HSI_IsReady+0x1a>
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	061b      	lsls	r3, r3, #24
 8000aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000af0:	4313      	orrs	r3, r2
 8000af2:	604b      	str	r3, [r1, #4]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d101      	bne.n	8000b16 <LL_RCC_LSE_IsReady+0x18>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e000      	b.n	8000b18 <LL_RCC_LSE_IsReady+0x1a>
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8000b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d101      	bne.n	8000b78 <LL_RCC_LSI_IsReady+0x18>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <LL_RCC_LSI_IsReady+0x1a>
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6013      	str	r3, [r2, #0]
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bac:	f023 0301 	bic.w	r3, r3, #1
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d101      	bne.n	8000bd0 <LL_RCC_MSI_IsReady+0x16>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <LL_RCC_MSI_IsReady+0x18>
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8000bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0308 	and.w	r3, r3, #8
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d101      	bne.n	8000bf0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c42:	4313      	orrs	r3, r2
 8000c44:	604b      	str	r3, [r1, #4]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f023 0203 	bic.w	r2, r3, #3
 8000c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 030c 	and.w	r3, r3, #12
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	608b      	str	r3, [r1, #8]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000cc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000cec:	f023 020f 	bic.w	r2, r3, #15
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	608b      	str	r3, [r1, #8]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	608b      	str	r3, [r1, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_8
  *         @arg @ref LL_RCC_MCO1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8000d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da2:	4313      	orrs	r3, r2
 8000da4:	608b      	str	r3, [r1, #8]
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000dfa:	d101      	bne.n	8000e00 <LL_RCC_PLL_IsReady+0x18>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <LL_RCC_PLL_IsReady+0x1a>
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	f003 0303 	and.w	r3, r3, #3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e76:	d101      	bne.n	8000e7c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e9a:	d101      	bne.n	8000ea0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebe:	d101      	bne.n	8000ec4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr

08000ece <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ee0:	d101      	bne.n	8000ee6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000f02:	d101      	bne.n	8000f08 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d101      	bne.n	8000f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e36f      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f26:	f7ff fea6 	bl	8000c76 <LL_RCC_GetSysClkSource>
 8000f2a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f2c:	f7ff ff8f 	bl	8000e4e <LL_RCC_PLL_GetMainSource>
 8000f30:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 80c4 	beq.w	80010c8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x3e>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2b0c      	cmp	r3, #12
 8000f4a:	d176      	bne.n	800103a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d173      	bne.n	800103a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e353      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0308 	and.w	r3, r3, #8
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_OscConfig+0x68>
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f7a:	e006      	b.n	8000f8a <HAL_RCC_OscConfig+0x76>
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d222      	bcs.n	8000fd4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd70 	bl	8001a78 <RCC_SetFlashLatencyFromMSIRange>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e331      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe2b 	bl	8000c28 <LL_RCC_MSI_SetCalibTrimming>
 8000fd2:	e021      	b.n	8001018 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fde:	f043 0308 	orr.w	r3, r3, #8
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe12 	bl	8000c28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fd35 	bl	8001a78 <RCC_SetFlashLatencyFromMSIRange>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e2f6      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001018:	f000 fd1a 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 800101c:	4603      	mov	r3, r0
 800101e:	4aa7      	ldr	r2, [pc, #668]	; (80012bc <HAL_RCC_OscConfig+0x3a8>)
 8001020:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001022:	4ba7      	ldr	r3, [pc, #668]	; (80012c0 <HAL_RCC_OscConfig+0x3ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff f9f2 	bl	8000410 <HAL_InitTick>
 800102c:	4603      	mov	r3, r0
 800102e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001030:	7cfb      	ldrb	r3, [r7, #19]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d047      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001036:	7cfb      	ldrb	r3, [r7, #19]
 8001038:	e2e5      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d02c      	beq.n	800109c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001042:	f7ff fd9e 	bl	8000b82 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001046:	f7ff fa2f 	bl	80004a8 <HAL_GetTick>
 800104a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800104e:	f7ff fa2b 	bl	80004a8 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e2d2      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001060:	f7ff fdab 	bl	8000bba <LL_RCC_MSI_IsReady>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f1      	beq.n	800104e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fdc7 	bl	8000c28 <LL_RCC_MSI_SetCalibTrimming>
 800109a:	e015      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800109c:	f7ff fd7f 	bl	8000b9e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fa02 	bl	80004a8 <HAL_GetTick>
 80010a4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010a8:	f7ff f9fe 	bl	80004a8 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e2a5      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80010ba:	f7ff fd7e 	bl	8000bba <LL_RCC_MSI_IsReady>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1f1      	bne.n	80010a8 <HAL_RCC_OscConfig+0x194>
 80010c4:	e000      	b.n	80010c8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80010c6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d058      	beq.n	8001186 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1d2>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d108      	bne.n	80010f2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	d105      	bne.n	80010f2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d14b      	bne.n	8001186 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e289      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001110:	d102      	bne.n	8001118 <HAL_RCC_OscConfig+0x204>
 8001112:	f7ff fc86 	bl	8000a22 <LL_RCC_HSE_Enable>
 8001116:	e00d      	b.n	8001134 <HAL_RCC_OscConfig+0x220>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001120:	d104      	bne.n	800112c <HAL_RCC_OscConfig+0x218>
 8001122:	f7ff fc51 	bl	80009c8 <LL_RCC_HSE_EnableTcxo>
 8001126:	f7ff fc7c 	bl	8000a22 <LL_RCC_HSE_Enable>
 800112a:	e003      	b.n	8001134 <HAL_RCC_OscConfig+0x220>
 800112c:	f7ff fc87 	bl	8000a3e <LL_RCC_HSE_Disable>
 8001130:	f7ff fc58 	bl	80009e4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d012      	beq.n	8001162 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff f9b4 	bl	80004a8 <HAL_GetTick>
 8001140:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff f9b0 	bl	80004a8 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e257      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001156:	f7ff fc80 	bl	8000a5a <LL_RCC_HSE_IsReady>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f1      	beq.n	8001144 <HAL_RCC_OscConfig+0x230>
 8001160:	e011      	b.n	8001186 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001162:	f7ff f9a1 	bl	80004a8 <HAL_GetTick>
 8001166:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116a:	f7ff f99d 	bl	80004a8 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e244      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800117c:	f7ff fc6d 	bl	8000a5a <LL_RCC_HSE_IsReady>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f1      	bne.n	800116a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d046      	beq.n	8001220 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d005      	beq.n	80011a4 <HAL_RCC_OscConfig+0x290>
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	d10e      	bne.n	80011bc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e22a      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fc8e 	bl	8000ad6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80011ba:	e031      	b.n	8001220 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d019      	beq.n	80011f8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c4:	f7ff fc5a 	bl	8000a7c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff f96e 	bl	80004a8 <HAL_GetTick>
 80011cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff f96a 	bl	80004a8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e211      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80011e2:	f7ff fc67 	bl	8000ab4 <LL_RCC_HSI_IsReady>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0f1      	beq.n	80011d0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fc70 	bl	8000ad6 <LL_RCC_HSI_SetCalibTrimming>
 80011f6:	e013      	b.n	8001220 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f8:	f7ff fc4e 	bl	8000a98 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff f954 	bl	80004a8 <HAL_GetTick>
 8001200:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff f950 	bl	80004a8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e1f7      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001216:	f7ff fc4d 	bl	8000ab4 <LL_RCC_HSI_IsReady>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1f1      	bne.n	8001204 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d06e      	beq.n	800130a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d056      	beq.n	80012e2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800123c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69da      	ldr	r2, [r3, #28]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	429a      	cmp	r2, r3
 800124a:	d031      	beq.n	80012b0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e1d0      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d013      	beq.n	8001296 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800126e:	f7ff fc67 	bl	8000b40 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001272:	f7ff f919 	bl	80004a8 <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127a:	f7ff f915 	bl	80004a8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b11      	cmp	r3, #17
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1bc      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800128c:	f7ff fc68 	bl	8000b60 <LL_RCC_LSI_IsReady>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f1      	bne.n	800127a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800129e:	f023 0210 	bic.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012aa:	4313      	orrs	r3, r2
 80012ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b0:	f7ff fc36 	bl	8000b20 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b4:	f7ff f8f8 	bl	80004a8 <HAL_GetTick>
 80012b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80012ba:	e00c      	b.n	80012d6 <HAL_RCC_OscConfig+0x3c2>
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff f8f0 	bl	80004a8 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b11      	cmp	r3, #17
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e197      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80012d6:	f7ff fc43 	bl	8000b60 <LL_RCC_LSI_IsReady>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f1      	beq.n	80012c4 <HAL_RCC_OscConfig+0x3b0>
 80012e0:	e013      	b.n	800130a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e2:	f7ff fc2d 	bl	8000b40 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff f8df 	bl	80004a8 <HAL_GetTick>
 80012ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff f8db 	bl	80004a8 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e182      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001300:	f7ff fc2e 	bl	8000b60 <LL_RCC_LSI_IsReady>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f1      	bne.n	80012ee <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80d8 	beq.w	80014c8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001318:	f7ff fb44 	bl	80009a4 <LL_PWR_IsEnabledBkUpAccess>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d113      	bne.n	800134a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001322:	f7ff fb25 	bl	8000970 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff f8bf 	bl	80004a8 <HAL_GetTick>
 800132a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff f8bb 	bl	80004a8 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e162      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001340:	f7ff fb30 	bl	80009a4 <LL_PWR_IsEnabledBkUpAccess>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f1      	beq.n	800132e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d07b      	beq.n	800144a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b85      	cmp	r3, #133	; 0x85
 8001358:	d003      	beq.n	8001362 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d109      	bne.n	8001376 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff f897 	bl	80004a8 <HAL_GetTick>
 800137a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800137c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff f889 	bl	80004a8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e12e      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80013a8:	f7ff fba9 	bl	8000afe <LL_RCC_LSE_IsReady>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ef      	beq.n	8001392 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b81      	cmp	r3, #129	; 0x81
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b85      	cmp	r3, #133	; 0x85
 80013c0:	d121      	bne.n	8001406 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff f871 	bl	80004a8 <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff f863 	bl	80004a8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e108      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80013f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ec      	beq.n	80013de <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001404:	e060      	b.n	80014c8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff f84f 	bl	80004a8 <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800141c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001420:	e00a      	b.n	8001438 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001422:	f7ff f841 	bl	80004a8 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	4293      	cmp	r3, r2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e0e6      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ec      	bne.n	8001422 <HAL_RCC_OscConfig+0x50e>
 8001448:	e03e      	b.n	80014c8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff f82d 	bl	80004a8 <HAL_GetTick>
 800144e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff f81f 	bl	80004a8 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0c4      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ec      	bne.n	8001466 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff f80c 	bl	80004a8 <HAL_GetTick>
 8001490:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80014a6:	e00a      	b.n	80014be <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a8:	f7fe fffe 	bl	80004a8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e0a3      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80014be:	f7ff fb1e 	bl	8000afe <LL_RCC_LSE_IsReady>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ef      	bne.n	80014a8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 8099 	beq.w	8001604 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	2b0c      	cmp	r3, #12
 80014d6:	d06c      	beq.n	80015b2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d14b      	bne.n	8001578 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e0:	f7ff fc74 	bl	8000dcc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7fe ffe0 	bl	80004a8 <HAL_GetTick>
 80014e8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ec:	f7fe ffdc 	bl	80004a8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e083      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80014fe:	f7ff fc73 	bl	8000de8 <LL_RCC_PLL_IsReady>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f1      	bne.n	80014ec <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_RCC_OscConfig+0x6fc>)
 8001510:	4013      	ands	r3, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001520:	0212      	lsls	r2, r2, #8
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800152e:	4311      	orrs	r1, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001534:	430a      	orrs	r2, r1
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153a:	4313      	orrs	r3, r2
 800153c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153e:	f7ff fc37 	bl	8000db0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7fe ffa9 	bl	80004a8 <HAL_GetTick>
 8001556:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7fe ffa5 	bl	80004a8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b0a      	cmp	r3, #10
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e04c      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800156c:	f7ff fc3c 	bl	8000de8 <LL_RCC_PLL_IsReady>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f1      	beq.n	800155a <HAL_RCC_OscConfig+0x646>
 8001576:	e045      	b.n	8001604 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001578:	f7ff fc28 	bl	8000dcc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7fe ff94 	bl	80004a8 <HAL_GetTick>
 8001580:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7fe ff90 	bl	80004a8 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b0a      	cmp	r3, #10
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e037      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001596:	f7ff fc27 	bl	8000de8 <LL_RCC_PLL_IsReady>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1f1      	bne.n	8001584 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_OscConfig+0x700>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	60cb      	str	r3, [r1, #12]
 80015b0:	e028      	b.n	8001604 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e023      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d115      	bne.n	8001600 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	429a      	cmp	r2, r3
 80015e0:	d10e      	bne.n	8001600 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	11c1808c 	.word	0x11c1808c
 8001614:	eefefffc 	.word	0xeefefffc

08001618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e12c      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b98      	ldr	r3, [pc, #608]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d91b      	bls.n	8001672 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b95      	ldr	r3, [pc, #596]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0207 	bic.w	r2, r3, #7
 8001642:	4993      	ldr	r1, [pc, #588]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164a:	f7fe ff2d 	bl	80004a8 <HAL_GetTick>
 800164e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001650:	e008      	b.n	8001664 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001652:	f7fe ff29 	bl	80004a8 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e110      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001664:	4b8a      	ldr	r3, [pc, #552]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d1ef      	bne.n	8001652 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d016      	beq.n	80016ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb02 	bl	8000c8c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001688:	f7fe ff0e 	bl	80004a8 <HAL_GetTick>
 800168c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001690:	f7fe ff0a 	bl	80004a8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0f1      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80016a2:	f7ff fbdf 	bl	8000e64 <LL_RCC_IsActiveFlag_HPRE>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0f1      	beq.n	8001690 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d016      	beq.n	80016e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff faf8 	bl	8000cb2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80016c2:	f7fe fef1 	bl	80004a8 <HAL_GetTick>
 80016c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80016ca:	f7fe feed 	bl	80004a8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e0d4      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80016dc:	f7ff fbd3 	bl	8000e86 <LL_RCC_IsActiveFlag_C2HPRE>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f1      	beq.n	80016ca <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff faf0 	bl	8000cdc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80016fc:	f7fe fed4 	bl	80004a8 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001704:	f7fe fed0 	bl	80004a8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e0b7      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001716:	f7ff fbc8 	bl	8000eaa <LL_RCC_IsActiveFlag_SHDHPRE>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f1      	beq.n	8001704 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d016      	beq.n	800175a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fae9 	bl	8000d08 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001736:	f7fe feb7 	bl	80004a8 <HAL_GetTick>
 800173a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800173e:	f7fe feb3 	bl	80004a8 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e09a      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001750:	f7ff fbbd 	bl	8000ece <LL_RCC_IsActiveFlag_PPRE1>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f1      	beq.n	800173e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d017      	beq.n	8001796 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fade 	bl	8000d2e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001772:	f7fe fe99 	bl	80004a8 <HAL_GetTick>
 8001776:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800177a:	f7fe fe95 	bl	80004a8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e07c      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800178c:	f7ff fbb0 	bl	8000ef0 <LL_RCC_IsActiveFlag_PPRE2>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f1      	beq.n	800177a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d043      	beq.n	800182a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80017aa:	f7ff f956 	bl	8000a5a <LL_RCC_HSE_IsReady>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d11e      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e066      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d106      	bne.n	80017ce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80017c0:	f7ff fb12 	bl	8000de8 <LL_RCC_PLL_IsReady>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d113      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e05b      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80017d6:	f7ff f9f0 	bl	8000bba <LL_RCC_MSI_IsReady>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d108      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e050      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80017e4:	f7ff f966 	bl	8000ab4 <LL_RCC_HSI_IsReady>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e049      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa2a 	bl	8000c50 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7fe fe54 	bl	80004a8 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7fe fe50 	bl	80004a8 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e035      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	f7ff fa2c 	bl	8000c76 <LL_RCC_GetSysClkSource>
 800181e:	4602      	mov	r2, r0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	429a      	cmp	r2, r3
 8001828:	d1ec      	bne.n	8001804 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d21b      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 0207 	bic.w	r2, r3, #7
 8001840:	4913      	ldr	r1, [pc, #76]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7fe fe2e 	bl	80004a8 <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	e008      	b.n	8001862 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001850:	f7fe fe2a 	bl	80004a8 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e011      	b.n	8001886 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_ClockConfig+0x278>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d1ef      	bne.n	8001850 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001870:	f000 f8ee 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001874:	4603      	mov	r3, r0
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_RCC_ClockConfig+0x27c>)
 8001878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <HAL_RCC_ClockConfig+0x280>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdc6 	bl	8000410 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	58004000 	.word	0x58004000
 8001894:	20000000 	.word	0x20000000
 8001898:	20000004 	.word	0x20000004

0800189c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Mode      = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull      = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	0c1b      	lsrs	r3, r3, #16
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80018c0:	029b      	lsls	r3, r3, #10
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  SET_BIT(RCC->AHB2ENR, (1UL << mco_gpio_index ));
 80018ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d4:	2101      	movs	r1, #1
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e0:	4313      	orrs	r3, r2
 80018e2:	64cb      	str	r3, [r1, #76]	; 0x4c

  /* Configure the MCOx pin in alternate function mode */
  gpio_initstruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0d1b      	lsrs	r3, r3, #20
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(mco_gpio_port, &gpio_initstruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018fa:	f7fe fec1 	bl	8000680 <HAL_GPIO_Init>

  /* Configure the microcontroller clock output (MCO) */
  LL_RCC_ConfigMCO(RCC_MCOSource, RCC_MCODiv);
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	68b8      	ldr	r0, [r7, #8]
 8001902:	f7ff fa3f 	bl	8000d84 <LL_RCC_ConfigMCO>
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191e:	f7ff f9aa 	bl	8000c76 <LL_RCC_GetSysClkSource>
 8001922:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001924:	f7ff fa93 	bl	8000e4e <LL_RCC_PLL_GetMainSource>
 8001928:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x2c>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d139      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d136      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800193c:	f7ff f94d 	bl	8000bda <LL_RCC_MSI_IsEnabledRangeSelect>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d115      	bne.n	8001972 <HAL_RCC_GetSysClockFreq+0x62>
 8001946:	f7ff f948 	bl	8000bda <LL_RCC_MSI_IsEnabledRangeSelect>
 800194a:	4603      	mov	r3, r0
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_GetSysClockFreq+0x4e>
 8001950:	f7ff f953 	bl	8000bfa <LL_RCC_MSI_GetRange>
 8001954:	4603      	mov	r3, r0
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	f003 030f 	and.w	r3, r3, #15
 800195c:	e005      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x5a>
 800195e:	f7ff f957 	bl	8000c10 <LL_RCC_MSI_GetRangeAfterStandby>
 8001962:	4603      	mov	r3, r0
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	4a36      	ldr	r2, [pc, #216]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x134>)
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	e014      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x8c>
 8001972:	f7ff f932 	bl	8000bda <LL_RCC_MSI_IsEnabledRangeSelect>
 8001976:	4603      	mov	r3, r0
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x7a>
 800197c:	f7ff f93d 	bl	8000bfa <LL_RCC_MSI_GetRange>
 8001980:	4603      	mov	r3, r0
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	e005      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x86>
 800198a:	f7ff f941 	bl	8000c10 <LL_RCC_MSI_GetRangeAfterStandby>
 800198e:	4603      	mov	r3, r0
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x134>)
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80019a8:	e012      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e00c      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80019bc:	f7ff f820 	bl	8000a00 <LL_RCC_HSE_IsEnabledDiv2>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d102      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e001      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x13c>)
 80019ce:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d0:	f7ff f951 	bl	8000c76 <LL_RCC_GetSysClkSource>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d12f      	bne.n	8001a3a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80019da:	f7ff fa38 	bl	8000e4e <LL_RCC_PLL_GetMainSource>
 80019de:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0xde>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d003      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0xe4>
 80019ec:	e00d      	b.n	8001a0a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 80019f0:	60fb      	str	r3, [r7, #12]
        break;
 80019f2:	e00d      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80019f4:	f7ff f804 	bl	8000a00 <LL_RCC_HSE_IsEnabledDiv2>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d102      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x138>)
 8001a00:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001a02:	e005      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a06:	60fb      	str	r3, [r7, #12]
        break;
 8001a08:	e002      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	60fb      	str	r3, [r7, #12]
        break;
 8001a0e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001a10:	f7ff f9fb 	bl	8000e0a <LL_RCC_PLL_GetN>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	fb03 f402 	mul.w	r4, r3, r2
 8001a1c:	f7ff fa0c 	bl	8000e38 <LL_RCC_PLL_GetDivider>
 8001a20:	4603      	mov	r3, r0
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	3301      	adds	r3, #1
 8001a26:	fbb4 f4f3 	udiv	r4, r4, r3
 8001a2a:	f7ff f9fa 	bl	8000e22 <LL_RCC_PLL_GetR>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	0f5b      	lsrs	r3, r3, #29
 8001a32:	3301      	adds	r3, #1
 8001a34:	fbb4 f3f3 	udiv	r3, r4, r3
 8001a38:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001a3a:	697b      	ldr	r3, [r7, #20]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	08001ca8 	.word	0x08001ca8
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	01e84800 	.word	0x01e84800

08001a50 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b598      	push	{r3, r4, r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001a54:	f7ff ff5c 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	f7ff f97b 	bl	8000d54 <LL_RCC_GetAHBPrescaler>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x24>)
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd98      	pop	{r3, r4, r7, pc}
 8001a74:	08001c68 	.word	0x08001c68

08001a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4a10      	ldr	r2, [pc, #64]	; (8001acc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001a90:	f7ff f96b 	bl	8000d6a <LL_RCC_GetAHB3Prescaler>
 8001a94:	4603      	mov	r3, r0
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0c9c      	lsrs	r4, r3, #18
 8001ab4:	f7fe ff6a 	bl	800098c <HAL_PWREx_GetVoltageRange>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4619      	mov	r1, r3
 8001abc:	4620      	mov	r0, r4
 8001abe:	f000 f80b 	bl	8001ad8 <RCC_SetFlashLatency>
 8001ac2:	4603      	mov	r3, r0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	08001ca8 	.word	0x08001ca8
 8001ad0:	08001c68 	.word	0x08001c68
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	; 0x38
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001ae2:	4a3a      	ldr	r2, [pc, #232]	; (8001bcc <RCC_SetFlashLatency+0xf4>)
 8001ae4:	f107 0320 	add.w	r3, r7, #32
 8001ae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aec:	6018      	str	r0, [r3, #0]
 8001aee:	3304      	adds	r3, #4
 8001af0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001af2:	4a37      	ldr	r2, [pc, #220]	; (8001bd0 <RCC_SetFlashLatency+0xf8>)
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001afc:	6018      	str	r0, [r3, #0]
 8001afe:	3304      	adds	r3, #4
 8001b00:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001b02:	4a34      	ldr	r2, [pc, #208]	; (8001bd4 <RCC_SetFlashLatency+0xfc>)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001b0e:	2300      	movs	r3, #0
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b18:	d11b      	bne.n	8001b52 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1e:	e014      	b.n	8001b4a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	3338      	adds	r3, #56	; 0x38
 8001b26:	443b      	add	r3, r7
 8001b28:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d807      	bhi.n	8001b44 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	3338      	adds	r3, #56	; 0x38
 8001b3a:	443b      	add	r3, r7
 8001b3c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001b42:	e021      	b.n	8001b88 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	3301      	adds	r3, #1
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d9e7      	bls.n	8001b20 <RCC_SetFlashLatency+0x48>
 8001b50:	e01a      	b.n	8001b88 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b56:	e014      	b.n	8001b82 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	3338      	adds	r3, #56	; 0x38
 8001b5e:	443b      	add	r3, r7
 8001b60:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d807      	bhi.n	8001b7c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	3338      	adds	r3, #56	; 0x38
 8001b72:	443b      	add	r3, r7
 8001b74:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001b7a:	e005      	b.n	8001b88 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	3301      	adds	r3, #1
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d9e7      	bls.n	8001b58 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <RCC_SetFlashLatency+0x100>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 0207 	bic.w	r2, r3, #7
 8001b90:	4911      	ldr	r1, [pc, #68]	; (8001bd8 <RCC_SetFlashLatency+0x100>)
 8001b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b98:	f7fe fc86 	bl	80004a8 <HAL_GetTick>
 8001b9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001b9e:	e008      	b.n	8001bb2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001ba0:	f7fe fc82 	bl	80004a8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e007      	b.n	8001bc2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <RCC_SetFlashLatency+0x100>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1ef      	bne.n	8001ba0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3738      	adds	r7, #56	; 0x38
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08001c4c 	.word	0x08001c4c
 8001bd0:	08001c54 	.word	0x08001c54
 8001bd4:	08001c5c 	.word	0x08001c5c
 8001bd8:	58004000 	.word	0x58004000

08001bdc <memset>:
 8001bdc:	4402      	add	r2, r0
 8001bde:	4603      	mov	r3, r0
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d100      	bne.n	8001be6 <memset+0xa>
 8001be4:	4770      	bx	lr
 8001be6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bea:	e7f9      	b.n	8001be0 <memset+0x4>

08001bec <__libc_init_array>:
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	4d0d      	ldr	r5, [pc, #52]	; (8001c24 <__libc_init_array+0x38>)
 8001bf0:	4c0d      	ldr	r4, [pc, #52]	; (8001c28 <__libc_init_array+0x3c>)
 8001bf2:	1b64      	subs	r4, r4, r5
 8001bf4:	10a4      	asrs	r4, r4, #2
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	42a6      	cmp	r6, r4
 8001bfa:	d109      	bne.n	8001c10 <__libc_init_array+0x24>
 8001bfc:	4d0b      	ldr	r5, [pc, #44]	; (8001c2c <__libc_init_array+0x40>)
 8001bfe:	4c0c      	ldr	r4, [pc, #48]	; (8001c30 <__libc_init_array+0x44>)
 8001c00:	f000 f818 	bl	8001c34 <_init>
 8001c04:	1b64      	subs	r4, r4, r5
 8001c06:	10a4      	asrs	r4, r4, #2
 8001c08:	2600      	movs	r6, #0
 8001c0a:	42a6      	cmp	r6, r4
 8001c0c:	d105      	bne.n	8001c1a <__libc_init_array+0x2e>
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
 8001c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c14:	4798      	blx	r3
 8001c16:	3601      	adds	r6, #1
 8001c18:	e7ee      	b.n	8001bf8 <__libc_init_array+0xc>
 8001c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1e:	4798      	blx	r3
 8001c20:	3601      	adds	r6, #1
 8001c22:	e7f2      	b.n	8001c0a <__libc_init_array+0x1e>
 8001c24:	08001ce8 	.word	0x08001ce8
 8001c28:	08001ce8 	.word	0x08001ce8
 8001c2c:	08001ce8 	.word	0x08001ce8
 8001c30:	08001cec 	.word	0x08001cec

08001c34 <_init>:
 8001c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c36:	bf00      	nop
 8001c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3a:	bc08      	pop	{r3}
 8001c3c:	469e      	mov	lr, r3
 8001c3e:	4770      	bx	lr

08001c40 <_fini>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	bf00      	nop
 8001c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c46:	bc08      	pop	{r3}
 8001c48:	469e      	mov	lr, r3
 8001c4a:	4770      	bx	lr
